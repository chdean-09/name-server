// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  passwordHash   String
  devices        Device[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PairingSession PairingSession[]
  Command        Command[]
}

model Device {
  id             String           @id @default(cuid())
  name           String
  macAddress     String           @unique // Bluetooth MAC address
  ipAddress      String?          // ESP32 IP address after WiFi connection
  wifiSSID       String?
  ownerId        String?
  owner          User?            @relation(fields: [ownerId], references: [id])
  isClaimed      Boolean          @default(false)
  isOnline       Boolean          @default(false)
  lastSeen       DateTime?
  pairingCode    String?          // Temporary pairing code for BLE pairing
  apiKey         String?          // Device API key for authentication
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PairingSession PairingSession[]
  Command        Command[]
}

model Command {
  id       String        @id @default(cuid())
  deviceId String
  device   Device        @relation(fields: [deviceId], references: [id])
  userId   String
  user     User          @relation(fields: [userId], references: [id])
  type     CommandType
  doorId   Int           // Which door (1, 2, or 3)
  status   CommandStatus @default(PENDING)
  sentAt   DateTime      @default(now())
  executedAt DateTime?
  response String?
}

enum CommandType {
  LOCK
  UNLOCK
}

enum CommandStatus {
  PENDING
  SENT
  EXECUTED
  FAILED
}

model PairingSession {
  id          String    @id @default(cuid())
  deviceId    String
  device      Device    @relation(fields: [deviceId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  isComplete  Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
}
